<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on DevCloud</title>
        <link>https://jyp-on.dev/posts/</link>
        <description>Recent content in Posts on DevCloud</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Fri, 13 Oct 2023 02:16:00 -0600</lastBuildDate>
        <atom:link href="https://jyp-on.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Linux 일반 사용자 Root 권한 추가</title>
            <link>https://jyp-on.dev/posts/2023/10/linux-%EC%9D%BC%EB%B0%98-%EC%82%AC%EC%9A%A9%EC%9E%90-root-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80/</link>
            <pubDate>Fri, 13 Oct 2023 02:16:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/10/linux-%EC%9D%BC%EB%B0%98-%EC%82%AC%EC%9A%A9%EC%9E%90-root-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80/</guid>
            <description>본 포스팅은 Ubuntu 22.04.3 LTS 환경을 사용하고 있습니다. super user 리스트에 들어가서 다음과 같이 일반 사용자에게도 super user 권한을 등록합니다. // 꼭 sudo를 붙여줘야 수정 가능합니다. sudo vi /etc/sudoers uid, gid를 0으로 수정합니다. vi /etc/passwd root group에서 내가 사용할 사용자의 username을 적는다 vi /etc/group 여기까지 하면 jyp라는 사용자에게 root권한을 부여하는 것이 끝났습니다.
하지만 jyp를 ssh를 통해서 원격으로 접속할 시 Permission Denied가 됩니다.
SSH의 설정 파일중 default로 Root권한을 가진 사용자로는 SSH 접속을 막기 때문입니다.</description>
            <content type="html"><![CDATA[<h2 id="본-포스팅은-ubuntu-22043-lts-환경을-사용하고-있습니다">본 포스팅은 Ubuntu 22.04.3 LTS 환경을 사용하고 있습니다.</h2>
<ol>
<li>super user 리스트에 들어가서 다음과 같이 일반 사용자에게도 super user 권한을 등록합니다.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>// 꼭 sudo를 붙여줘야 수정 가능합니다.
</span></span><span style="display:flex;"><span>sudo vi /etc/sudoers
</span></span></code></pre></div><p><img src="/Linux%EC%9D%BC%EB%B0%98%EC%82%AC%EC%9A%A9%EC%9E%90/1.png" alt=""></p>
<ol start="2">
<li>uid, gid를 0으로 수정합니다.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vi /etc/passwd
</span></span></code></pre></div><p><img src="/Linux%EC%9D%BC%EB%B0%98%EC%82%AC%EC%9A%A9%EC%9E%90/2.png" alt=""></p>
<ol start="3">
<li>root group에서 내가 사용할 사용자의 username을 적는다</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vi /etc/group
</span></span></code></pre></div><p><img src="/Linux%EC%9D%BC%EB%B0%98%EC%82%AC%EC%9A%A9%EC%9E%90/3.png" alt=""></p>
<p>여기까지 하면 jyp라는 사용자에게 root권한을 부여하는 것이 끝났습니다.<br>
하지만 jyp를 ssh를 통해서 원격으로 접속할 시 Permission Denied가 됩니다.</p>
<p>SSH의 설정 파일중 default로 Root권한을 가진 사용자로는 SSH 접속을 막기 때문입니다.<br>
다음과 같은 설정들로 이를 해결 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vi /etc/ssh/sshd_config
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>// 주석처리된 것들을 해제하고 yes 문자열이 뒤에 있어야 합니다.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PermitRootLogin yes
</span></span><span style="display:flex;"><span>PasswordAuthentication yes
</span></span></code></pre></div><ul>
<li>마지막으로 바뀐 설정들을 적용하기 위해 <strong>sudo service ssh restart</strong> 를 통해 SSH를 재시작 해주면 외부에서도 SSH를 통해 잘 접속할 수 있습니다.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Docker에 nginx 컨테이너 올리기</title>
            <link>https://jyp-on.dev/posts/2023/10/docker%EC%97%90-nginx-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%98%AC%EB%A6%AC%EA%B8%B0/</link>
            <pubDate>Thu, 05 Oct 2023 02:16:00 -1200</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/10/docker%EC%97%90-nginx-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%98%AC%EB%A6%AC%EA%B8%B0/</guid>
            <description>Docker에 nginx를 올리는 방법은 다음과 같다.
// 5121 포트로 들어가면 nginx가 받아서 80포트로 넘겨준다. docker run -dit --name {name} -p 5121:80 nginx 하지만 이렇게 올리면 nginx 컨테이너의 bash로 들어가서 정적파일들을 특정 장소에 위치시켜줘야한다.
nginx 컨테이너 bash에 들어가는 방법은 다음과 같다.
docker exec -it {컨테이너이름} /bin/bash -exec는 뒤에 명령어를 실행 하는 것 or docker attach {컨테이너이름} -바로 컨테이너에 들어가는 것 -it 명령어는 컨테이너 속 터미널 입력을 할수 있도록 하는데 터미널에서 /bin/bash를 실행해서 bash shell로 들어갈수 있다.</description>
            <content type="html"><![CDATA[<p>Docker에 nginx를 올리는 방법은 다음과 같다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>// <span style="color:#ae81ff">5121</span> 포트로 들어가면 nginx가 받아서 80포트로 넘겨준다.
</span></span><span style="display:flex;"><span>docker run -dit --name <span style="color:#f92672">{</span>name<span style="color:#f92672">}</span> -p 5121:80 nginx
</span></span></code></pre></div><p>하지만 이렇게 올리면 nginx 컨테이너의 bash로 들어가서 정적파일들을 특정 장소에 위치시켜줘야한다.</p>
<p>nginx 컨테이너 bash에 들어가는 방법은 다음과 같다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker exec -it <span style="color:#f92672">{</span>컨테이너이름<span style="color:#f92672">}</span> /bin/bash -exec는 뒤에 명령어를 실행 하는 것
</span></span><span style="display:flex;"><span>or
</span></span><span style="display:flex;"><span>docker attach <span style="color:#f92672">{</span>컨테이너이름<span style="color:#f92672">}</span> -바로 컨테이너에 들어가는 것
</span></span></code></pre></div><ul>
<li>-it 명령어는 컨테이너 속 터미널 입력을 할수 있도록 하는데 터미널에서 /bin/bash를 실행해서 bash shell로 들어갈수 있다.</li>
</ul>
<p>하지만 볼륨을 이용해서 로컬에있는 정적파일을 nginx의 특정 장소에 바로 매핑해주면 로컬에서 파일을 자동으로 매핑해준다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d --name <span style="color:#f92672">{</span>컨테이너이름<span style="color:#f92672">}</span> -p 5121:80 -v /<span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>$/webroot/:/usr/share/nginx/html:ro nginx
</span></span></code></pre></div><ul>
<li>-d (detach mode) 명령어는 기본적으로 포그라운드에서 실행되는 컨테이너를 백그라운드로 분리하라는 명령어다. (콘솔창을 바로 사용가능하다)</li>
<li>&ndash;name 명령어는 컨테이너 이름을 지정해주는 명령어다.</li>
<li>-p 명령어는 클라이언트에서 5121 port로 접속하면 컨테이너 내의 80 포트로 넘겨준다.</li>
<li>-v 명령어는 -v {호스트폴더}:{컨테이너폴더} 로 파일을 매핑해준다.</li>
<li>:ro는 read only로 로컬저장소의 파일을 불러올떄 읽기만 허용하도록 한다.</li>
</ul>
<p>아파치의 컨테이너 폴더는 다음과 같다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -dit --name <span style="color:#f92672">{</span>컨테이너이름<span style="color:#f92672">}</span> -p 5121:80 -v <span style="color:#f92672">{</span>호스트폴더<span style="color:#f92672">}</span>:/usr/local/apache2/htdocs/ httpd
</span></span></code></pre></div><p>만약 -d 를 안쓰고 포그라운드로 들어갔다면
exit으로 나올수 있지만 CTRL+p, CTRL_q 를 순서대로 입력하면 된다.</p>
]]></content>
        </item>
        
        <item>
            <title>jpa error - (integer not null)</title>
            <link>https://jyp-on.dev/posts/2023/09/jpa-error-integer-not-null/</link>
            <pubDate>Thu, 21 Sep 2023 02:16:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/jpa-error-integer-not-null/</guid>
            <description>오늘 jpa entity를 설계하다가 예상치 못한 에러를 겪은 썰을 풀고자 한다..
문제의 Entity는 다음과 같다.
@Getter @Builder @AllArgsConstructor @NoArgsConstructor @Table(name = &amp;#34;reservation_time&amp;#34;) @Entity public class Time { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long tno; private LocalDate date; private int index; @JsonBackReference @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = &amp;#34;mid&amp;#34;, nullable = false) private Admin admin; public void setAdmin(Admin admin) { this.admin = admin; } } 문제점을 찾았으면 이 글을 더이상 보지 않아도 된다.</description>
            <content type="html"><![CDATA[<p>오늘 jpa entity를 설계하다가 예상치 못한 에러를 겪은 썰을 풀고자 한다..<br>
문제의 Entity는 다음과 같다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Getter</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Builder</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@NoArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Table</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;reservation_time&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Time</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Id</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GeneratedValue</span><span style="color:#f92672">(</span>strategy <span style="color:#f92672">=</span> GenerationType<span style="color:#f92672">.</span><span style="color:#a6e22e">IDENTITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Long tno<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> LocalDate date<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> index<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@JsonBackReference</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@ManyToOne</span><span style="color:#f92672">(</span>fetch <span style="color:#f92672">=</span> FetchType<span style="color:#f92672">.</span><span style="color:#a6e22e">LAZY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@JoinColumn</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mid&#34;</span><span style="color:#f92672">,</span> nullable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Admin admin<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAdmin</span><span style="color:#f92672">(</span>Admin admin<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">admin</span> <span style="color:#f92672">=</span> admin<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>문제점을 찾았으면 이 글을 더이상 보지 않아도 된다.
엔티티에 대한 설명을 간단히 하자면 관리자의 예약시간을 저장하는 엔티티이다.<br>
예약을 받으면 Time entity에 1개의 row가 생기고 admin과 연관관계를 맺는다.</p>
<p>하지만 위처럼 코드를 작성하면 다음과 같은 에러를 마주한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>WARN 37304 --- [  restartedMain] o.m.jdbc.message.server.ErrorPacket
</span></span><span style="display:flex;"><span>      : Error: 1064-42000: You have an error in your SQL syntax; 
</span></span><span style="display:flex;"><span>      check the manual that corresponds to 
</span></span><span style="display:flex;"><span>      your MariaDB server version for the right syntax to use near &#39;integer not null,
</span></span></code></pre></div><p>나는 이것을 보고 왜 이런 오류가 뜨는지 이유를 알 수 없었다.<br>
<em><strong>sql을 직접 짠 것도 아닌데 syntax Error..?</strong></em></p>
<p>영문을 몰라서 나의 영원한 친구 뤼튼에게 질문을 해보았지만 얘도 계속 잘못짚길래 다시 영원한 고통으로 빠져들었다&hellip;
좀 더 고민을 해보니 date나 index 라는 컬럼명이 눈에 들어왔다.<br>
<em><strong>설마 예약어가 겹쳐서..?</strong></em></p>
<p>index라는 예약어가 있었던 것 같은 생각이 주마등을 스쳐갔다.
아래와 같이 바꾸니 ddl 문이 정상적으로 작동하였다.. ㅠ</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Column</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;time_index&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> index<span style="color:#f92672">;</span>
</span></span></code></pre></div><h2 id="오늘의-교훈--좀-더-창의적으로-의심하자">오늘의 교훈 : 좀 더 창의적으로 의심하자.</h2>
]]></content>
        </item>
        
        <item>
            <title>더티체킹이란? (dirty checking)</title>
            <link>https://jyp-on.dev/posts/2023/09/%EB%8D%94%ED%8B%B0%EC%B2%B4%ED%82%B9%EC%9D%B4%EB%9E%80-dirty-checking/</link>
            <pubDate>Wed, 20 Sep 2023 12:16:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/%EB%8D%94%ED%8B%B0%EC%B2%B4%ED%82%B9%EC%9D%B4%EB%9E%80-dirty-checking/</guid>
            <description>먼저 더티체킹이란 직역하면 더러운 것을 체크 한다는 뜻인데, 변경 감지라고 이해하면 된다.
JPA는 엔티티를 영속성 컨텍스트에 보관할 때, 최초의 상태를 저장하며 이것을 스냅샷 이라고 부른다.
어떠한 방식으로 변경을 감지하는지 살펴보자. 트랜잭션을 커밋 하는시점에 엔티티 매니져 내부에서 flush가 호출된다. 엔티티와 스냅샷을 비교하여 변경된 부분을 찾는다. 변경된 부분이 있으면 수정 쿼리를 생성해 쓰기 지연 SQL 저장소에 보관한다. 쓰기 지연 저장소의 SQL을 데이터베이스에 보낸다. 데이터베이스 트랜잭션을 커밋한다. 위와 같은 flow로 진행된다.
변경 감지는 영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용되며, 이는 즉 비영속, 준영속 처럼 영속성 컨텍스트의 관리를 받지 못하는 엔티티는 값을 변경하여도 데이터베이스에 반영이 되지 않는다.</description>
            <content type="html"><![CDATA[<p>먼저 더티체킹이란 직역하면 더러운 것을 체크 한다는 뜻인데, 변경 감지라고 이해하면 된다.<br>
JPA는 엔티티를 영속성 컨텍스트에 보관할 때, 최초의 상태를 저장하며 이것을 <strong>스냅샷</strong> 이라고 부른다.</p>
<h2 id="어떠한-방식으로-변경을-감지하는지-살펴보자">어떠한 방식으로 변경을 감지하는지 살펴보자.</h2>
<ol>
<li>트랜잭션을 커밋 하는시점에 엔티티 매니져 내부에서 flush가 호출된다.</li>
<li>엔티티와 스냅샷을 비교하여 변경된 부분을 찾는다.</li>
<li>변경된 부분이 있으면 수정 쿼리를 생성해 쓰기 지연 SQL 저장소에 보관한다.</li>
<li>쓰기 지연 저장소의 SQL을 데이터베이스에 보낸다.</li>
<li>데이터베이스 트랜잭션을 커밋한다.</li>
</ol>
<p>위와 같은 flow로 진행된다.<br>
변경 감지는 영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용되며, 이는 즉 비영속, 준영속 처럼 영속성 컨텍스트의
관리를 받지 못하는 엔티티는 값을 변경하여도 데이터베이스에 반영이 되지 않는다. 즉 더티체킹을 못한다.</p>
<h3 id="예제코드">예제코드</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>EntityManager em <span style="color:#f92672">=</span> emf<span style="color:#f92672">.</span><span style="color:#a6e22e">createEntityManager</span><span style="color:#f92672">();</span> <span style="color:#75715e">// 팩토리로부터 엔티티 매니져 생성
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>EntityTransaction transaction <span style="color:#f92672">=</span> em<span style="color:#f92672">.</span><span style="color:#a6e22e">getTransaction</span><span style="color:#f92672">();</span> <span style="color:#75715e">// 트랜잭션 생성
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>transaction<span style="color:#f92672">.</span><span style="color:#a6e22e">begin</span><span style="color:#f92672">();</span> <span style="color:#75715e">// 트랜잭션 시작
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 엔티티를 조회하여 영속성 컨텍스트안에 엔티티가 존재.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Member memberA <span style="color:#f92672">=</span> em<span style="color:#f92672">.</span><span style="color:#a6e22e">persist</span><span style="color:#f92672">(</span>Member<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;MemberA&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>memberA<span style="color:#f92672">.</span><span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;AA&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">//이름 변경
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>transaction<span style="color:#f92672">.</span><span style="color:#a6e22e">commit</span><span style="color:#f92672">();</span> <span style="color:#75715e">// 트랜잭션 커밋
</span></span></span></code></pre></div><p>위와 같이 영속성 컨텍스트로 불러온 memberA 인스턴스를 변경하면 flush 시점에 스냅샷과 비교하여 변경된 부분을 찾아낸다.
참고로 아래와 같이 수정된 데이터만을 SQL에 반영할 것으로 예상하지만</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">UPDATE</span> MEMBER
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SET</span> NAME <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>
</span></span></code></pre></div><p>실제로는 JPA의 기본 전략에 의해 엔티티의 모든 필드를 업데이트한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">UPDATE</span> MEMBER
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SET</span> NAME <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>,
</span></span><span style="display:flex;"><span>    AGE <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>,
</span></span><span style="display:flex;"><span>    GRADE <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>,
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> id <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>
</span></span></code></pre></div><p>이렇게 하는 이유는 크게 2가지가 있다.</p>
<ul>
<li>모든 필드를 사용하면 수정 쿼리가 같으므로 애플리케이션 로딩 시점에 쿼리를 생성해두고 재사용 가능하다.</li>
<li>DB 입장에서는 동일한 쿼리를 보내면 이전에 파싱해둔 쿼리를 재사용 가능하다.
하지만 필드가 많거나 저장되는 내용이 매우 크다면 수정된 데이터만을 사용하는 동적생성 전략을 하이버네이트의 확장 기능을 이용해
사용하면 된다.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@org.hibernate.annotations.DynamicUpdate</span>
</span></span></code></pre></div><p>수정된 데이터만을 사용해 UPDATE SQL을 생성한다.<br>
참고로 null이 아닌 필드만으로 INSERT SQL을 동적으로 생성하는 @DynamicInsert라는 것도 있다.</p>
<h2 id="참고사항">참고사항</h2>
<p>보통 컬럼이 30개 이상되면 @DynamicUpdate가 빠르다고 한다. 하지만 30개 이상의 컬럼이 한 테이블에 있다는 것 자체가 책임이 적절하게 분리되지 않았을 가능성이 높으므로 설계를 잘 하였는지 고민 하는 시간이 필요할 것이다.</p>
]]></content>
        </item>
        
        <item>
            <title>N&#43;1 문제란</title>
            <link>https://jyp-on.dev/posts/2023/09/n-1-%EB%AC%B8%EC%A0%9C%EB%9E%80/</link>
            <pubDate>Sat, 16 Sep 2023 05:10:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/n-1-%EB%AC%B8%EC%A0%9C%EB%9E%80/</guid>
            <description>N+1 문제의 예를들어 쉽게 설명 해보겠습니다.
다음과 같은 쿼리로 MEMBER 100명을 조회합니다.
SELECT * FROM MEMBER; 하지만 이 조회로 끝나는게 아니라 TEAM에 대한 조회가 필요하다면 MEMBER 조회 시 TEAM에 대한 조회도 같이 이루어집니다.
결국 100명의 회원에 대한 조회에서 회원마다의 팀 조회까지 이루어져 총 1 + N(100) = 101 번의 SQL 조회가 이루어 집니다. 그래서 저는 이 현상을 1 + N 문제라고 기억하는 편입니다.
이러한 문제를 해결하기 위해 몇 가지 방법이 있습니다.</description>
            <content type="html"><![CDATA[<p>N+1 문제의 예를들어 쉽게 설명 해보겠습니다.<br>
다음과 같은 쿼리로 MEMBER 100명을 조회합니다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> MEMBER;
</span></span></code></pre></div><p>하지만 이 조회로 끝나는게 아니라 TEAM에 대한 조회가 필요하다면 MEMBER 조회 시 TEAM에 대한 조회도 같이 이루어집니다.<br>
결국 100명의 회원에 대한 조회에서 회원마다의 팀 조회까지 이루어져 총 <strong>1 + N(100) = 101</strong> 번의 SQL 조회가 이루어 집니다.
그래서 저는 이 현상을 <strong>1 + N</strong> 문제라고 기억하는 편입니다.</p>
<p>이러한 문제를 해결하기 위해 몇 가지 방법이 있습니다.</p>
<ol>
<li><strong>EAGER 로딩 설정 변경</strong> : FetcyType을 EAGER로 변경하여 모든 엔티티를 한번에 검색하여 1번의 SQL로 필요한 모든 데이터를 가져올 수 있습니다. 하지만 이 방법은 성능 문제를 유발하므로 신중하게 사용해야 합니다.</li>
<li><strong>Fetch Join</strong> : JPQL 쿼리를 사용하여 Fetch Join을 사용하면 한번의 쿼리로 필요한 데이터를 가져 올 수 있습니다.</li>
<li><strong>쿼리 최적화</strong> : Native 쿼리나 JPQL을 사용하여 필요한 데이터만 검색하도록 쿼리를 최적화 할 수 있습니다.</li>
<li><strong>DTO로 조회</strong> : 필요한 데이터만 DTO로 매핑하여 조회 할 수 있습니다. <a href="https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/">관련 자료</a></li>
</ol>
<h2 id="참고문헌">참고문헌</h2>
<ol>
<li>김영한. (2015. 자바 ORM 표준 JPA 프로그래밍)</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>지연로딩, 즉시로딩이란?</title>
            <link>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</link>
            <pubDate>Fri, 15 Sep 2023 23:16:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</guid>
            <description>Fetch Type 설명 지연로딩 (LAZY) 연관된 객체를 사용하는 시점에 적절한 SELECT SQL을 실행 즉시로딩 (EAGER) 메인 객체 조회시 객체그래프를 탐색하여 연관된 객체 전부 SELECT 지연로딩을 예를 들어 Member에 직접적으로 연관된 테이블이 Team, Order이 있다고 치자.
// 첫 조회 시점에 SELECT MEMBER SQL을 날리고 Member member = jpa.find(Member.class, memberId); Team team = member.getTeam(); team.getTeamName(); // 이 시점에 SELECT TEAM SQL을 날린다. 즉시로딩 Example
// 첫 조회 시점에 SELECT MEMBER, TEAM, ORDER SQL을 날린다.</description>
            <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">Fetch Type</th>
<th style="text-align:left">설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">지연로딩 <strong>(LAZY)</strong></td>
<td style="text-align:left">연관된 객체를 <strong>사용</strong>하는 시점에 적절한 SELECT SQL을 실행</td>
</tr>
<tr>
<td style="text-align:left">즉시로딩 <strong>(EAGER)</strong></td>
<td style="text-align:left">메인 객체 조회시 객체그래프를 탐색하여 연관된 객체 <strong>전부</strong> SELECT</td>
</tr>
</tbody>
</table>
<p><strong>지연로딩</strong>을 예를 들어 Member에 직접적으로 연관된 테이블이 Team, Order이 있다고 치자.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 첫 조회 시점에 SELECT MEMBER SQL을 날리고
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Member member <span style="color:#f92672">=</span> jpa<span style="color:#f92672">.</span><span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>Member<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> memberId<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Team team <span style="color:#f92672">=</span> member<span style="color:#f92672">.</span><span style="color:#a6e22e">getTeam</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>team<span style="color:#f92672">.</span><span style="color:#a6e22e">getTeamName</span><span style="color:#f92672">();</span> <span style="color:#75715e">// 이 시점에 SELECT TEAM SQL을 날린다.
</span></span></span></code></pre></div><p><strong>즉시로딩</strong> Example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 첫 조회 시점에 SELECT MEMBER, TEAM, ORDER SQL을 날린다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Member member <span style="color:#f92672">=</span> jpa<span style="color:#f92672">.</span><span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>Member<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> memberId<span style="color:#f92672">);</span> 
</span></span></code></pre></div><p>즉시로딩은 한번 조회시에 모든 객체가 필요한 상황에서 쓰일 수 있으며<br>
이런 경우를 제외하고는 지연로딩을 통해 불필요한 SQL을 줄여야 한다.</p>
<h2 id="참고문헌">참고문헌</h2>
<ol>
<li>김영한. (2015. 자바 ORM 표준 JPA 프로그래밍)</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Spring Boot JPQL DTO Mapping</title>
            <link>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</link>
            <pubDate>Fri, 08 Sep 2023 22:16:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</guid>
            <description>jpa를 사용할때 jpa repository에서 return 을 DTO로 변환해서 받을 수 있다.
jpql select 부분에서 DTO로 사용할 객체를 생성 해줘야한다. 주의할 점은 DTO 생성시 패키지 초반부분부터 적어줘야 찾을 수 있다.
먼저 Person 객체와 PersonDTO 객체가 있다고 가정하자.
Person 객체에는 name, age, email, id,
PersonDTO 객체에는 name, age
이고 만약 최소 나이를 파라미터로 그 나이 이상의 Person 객체를 가져오고 싶다면 JPQL을 아래와 같이 구성 해야 한다.
@Query(value = &amp;#34;SELECT &amp;#34; + &amp;#34;new com.</description>
            <content type="html"><![CDATA[<p>jpa를 사용할때 jpa repository에서 return 을 <strong>DTO</strong>로 변환해서 받을 수 있다.</p>
<p>jpql select 부분에서 DTO로 사용할 객체를 생성 해줘야한다.
주의할 점은 DTO 생성시 패키지 초반부분부터 적어줘야 찾을 수 있다.</p>
<p>먼저 Person 객체와 PersonDTO 객체가 있다고 가정하자.</p>
<p><code>Person 객체에는 name, age, email, id</code>,<br>
<code>PersonDTO 객체에는 name, age</code><br>
이고 만약 최소 나이를 파라미터로 그 나이 이상의 Person 객체를 가져오고 싶다면 JPQL을 아래와 같이 구성 해야 한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Query</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> 
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;SELECT &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;new com.a.b.person.dto.PersonDTO(p.name, p.age) &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;FROM Person p &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;WHERE p.age &gt;= :minAge&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>PersonDTO<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getDTOByAge</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Param</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;minAge&#34;</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">int</span> minAge<span style="color:#f92672">);</span>
</span></span></code></pre></div><p>List<!-- raw HTML omitted --> 로 받아온 이유는 여러개의 데이터가 있을 수 있기 때문이다.<br>
만약 그냥 PersonDTO로 Return Type을 지정하였는데 2개 이상의 결과가 있으면 오류가 발생한다.</p>
<p>DTO 객체에 <strong>Json Auto Detect</strong> 어노테이션이 없으면 private field 접근을 못해서 json 변환이 안된다.<br>
또한 new 로 생성을 해줘야 하기 때문에 AllArgsConstructor도 넣어주자.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@JsonAutoDetect</span><span style="color:#f92672">(</span>fieldVisibility <span style="color:#f92672">=</span> JsonAutoDetect<span style="color:#f92672">.</span><span style="color:#a6e22e">Visibility</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ANY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonDTO</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Spring Boot [NaverCloud ObjectStorage] 사용법</title>
            <link>https://jyp-on.dev/posts/2023/09/spring-boot-navercloud-objectstorage-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
            <pubDate>Sat, 02 Sep 2023 16:14:00 -0600</pubDate>
            
            <guid>https://jyp-on.dev/posts/2023/09/spring-boot-navercloud-objectstorage-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
            <description>이번에 진행하는 프로젝트에서 영상 및 JSON 파일을 object storage에 저장하는 서비스 로직을 추가하게 되었다
설명에 앞서 Amazon의 S3가 아닌 Ncloud의 objectStorage를 선정한 이유는 크게 4가지다.
국내서비스라 문서읽기가 매우편함.
최근 Ncloud의 Server, DB 등등 사용해봐서 익숙함.
AWS 과금에 당한적이있음.
objectstorage 1주간 사용해봤는데 파일 크기가 얼마안되는지 아직까지 0원 청구됨. (매우쌈)
Amazon의 S3랑 완벽하게 호환되고 국내서비스라 Docs를 읽을때 좀 더 쉽게 이해할 수 있었다 나는 spring boot 즉 java 언어를 사용하기 때문에 아래와 같은 Docs를 참고하여 사용하였음</description>
            <content type="html"><![CDATA[<p>이번에 진행하는 프로젝트에서 영상 및 JSON 파일을 object storage에 저장하는 서비스 로직을 추가하게 되었다</p>
<p>설명에 앞서 Amazon의 S3가 아닌 Ncloud의 objectStorage를 선정한 이유는 크게 4가지다.</p>
<ol>
<li>
<p>국내서비스라 문서읽기가 매우편함.</p>
</li>
<li>
<p>최근 Ncloud의 Server, DB 등등 사용해봐서 익숙함.</p>
</li>
<li>
<p>AWS 과금에 당한적이있음.</p>
</li>
<li>
<p>objectstorage 1주간 사용해봤는데 파일 크기가 얼마안되는지 아직까지 0원 청구됨. (매우쌈)</p>
</li>
</ol>
<p>Amazon의 S3랑 완벽하게 호환되고 국내서비스라 Docs를 읽을때 좀 더 쉽게 이해할 수 있었다
나는 spring boot 즉 java 언어를 사용하기 때문에 아래와 같은 Docs를 참고하여 사용하였음</p>
<p><a href="https://guide.ncloud-docs.com/docs/storage-storage-8-1">Object Stroage Docs</a></p>
<p><a href="https://guide.ncloud-docs.com/docs/storage-storage-8-1">Java용 AWS SDK Guide</a></p>
<p>aws s3랑은 다르게 리소스가 좀 부족하여 개인적으로 커스터마이징을 하여서 사용하였는데 지금부터 어떻게 사용하였는지 설명하려고 한다</p>
<p>먼저 object storage를 사용신청하고 bucket을 만들어야한다.</p>
<p>나는 rehab이라는 bucket을 만들어놓았다.</p>
<p>추가적으로 json이랑 video 파일을 업로드할 폴더를 구분해놓았다. (이건 자유)</p>
<p><img src="/NaverCloud-ObjectStroage/img1.png" alt="Bucket Management"></p>
<p><strong>gradle 설정</strong></p>
<p>나는 spring boot 2.7.14, jdk 11을 사용하였고 밑에 의존성을 추가하였다</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gradle" data-lang="gradle"><span style="display:flex;"><span>implementation <span style="color:#e6db74">&#39;com.amazonaws:aws-java-sdk-s3:1.11.238&#39;</span>
</span></span></code></pre></div><h2 id="1-ncloud에서-access-key-secret-key-발급">1. ncloud에서 access-key, secret-key 발급</h2>
<p>마이페이지 -&gt; 인증키 관리 (여기서 인증키를 발급하면 된다)</p>
<h2 id="2-applicationyml-작성">2. application.yml 작성</h2>
<p>발급받은 키를 작성해주고 사용할 bucket이름을 써주면된다.</p>
<p>git같은 공유저장소에 올릴꺼라면 보안상 이파일을 숨겨주어야 한다.</p>
<p>필자는 따로 application-secret 을 따로만들어서 prifiles로 불러왔다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">cloud</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">aws</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">credentials</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">access-key</span>: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secret-key</span>: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">stack</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">auto</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">region</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">static</span>: <span style="color:#ae81ff">ap-northeast-2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">endpoint</span>: <span style="color:#ae81ff">https://kr.object.ncloudstorage.com</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#e6db74">&#34;rehab&#34;</span>
</span></span></code></pre></div><h2 id="3-s3client-설정파일-만들기">3. S3Client 설정파일 만들기</h2>
<p>@Configuration을 통해 설정파일을 만들어준다. (Configuration은 싱글톤을 유지해줘서 설정파일에 많이쓰인다고함)</p>
<p>외부에서 S3Client의 getAmazonS3 메소드를 이용해 s3 객체를 사용할 수 있도록 Bean 등록 해주었다.</p>
<p>Amazon s3와 연동되게 만들어서 그런지 AmazonS3를 반환해서 사용한다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">S3Client</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Value</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${cloud.aws.credentials.access-key}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String accessKey<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Value</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${cloud.aws.credentials.secret-key}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String secretKey<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Value</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${cloud.aws.s3.endpoint}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String endPoint<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Value</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${cloud.aws.region.static}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String regionName<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> AmazonS3 <span style="color:#a6e22e">getAmazonS3</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> AmazonS3ClientBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">standard</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">withEndpointConfiguration</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> AwsClientBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">EndpointConfiguration</span><span style="color:#f92672">(</span>endPoint<span style="color:#f92672">,</span> regionName<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">withCredentials</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> AWSStaticCredentialsProvider<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> BasicAWSCredentials<span style="color:#f92672">(</span>accessKey<span style="color:#f92672">,</span> secretKey<span style="color:#f92672">)))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="4-uploadapi-구현">4. UploadAPI 구현</h2>
<p>필자의 서비스로직 중 upload부분만 따로 가져왔다.</p>
<p>나는 MultipartFile들을 받아 File로 변환 후 S3에 경로를 지정후 저장해준다. (File로 변환해야 저장할수있음)</p>
<p>Path와 URL이 각각 존재하는 이유는 Path는 Object Stroage에 실제로 저장되는 경로이고 URL은 사용자가 접근 하여 파일을 얻을 수 있는 경로이다.</p>
<p>필자는 Path와 URL 둘다 DB에 저장하여 Path는 파일을 object storage에서 삭제할 때 사용하고 URL은 Client에게 접근할 수 있는 URL을 주기위해 사용한다. 참고로 URL은 object storage에서 파일 생성시 만들어주는데 만드는 방식이 일정해서 필자가 따로 URL을 예측하여 DB에 저장한다.</p>
<p>Path에서 video/, json/ 이 경로가 아까만든 bucket에 만든 폴더라고 보면된다.</p>
<p>추가적으로 uuid를 만들어 파일명 앞에 붙여놓았다. 같은 파일이름이 있으면 에러가 나기때문.</p>
<p>전달받은 이미지들은 spring이 정해진 임시저장소에 저장하는데 file upload가 끝나면 삭제처리를 해주었다. </p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> UploadFileDTO <span style="color:#a6e22e">uploadFileToS3</span><span style="color:#f92672">(</span>MultipartFile videoFile<span style="color:#f92672">,</span> MultipartFile jsonFile<span style="color:#f92672">,</span> Program program<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    AmazonS3 s3 <span style="color:#f92672">=</span> s3Client<span style="color:#f92672">.</span><span style="color:#a6e22e">getAmazonS3</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    UUID uuid <span style="color:#f92672">=</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    String videoFileName <span style="color:#f92672">=</span> uuid <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;_&#34;</span> <span style="color:#f92672">+</span> videoFile<span style="color:#f92672">.</span><span style="color:#a6e22e">getOriginalFilename</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    String jsonFileName <span style="color:#f92672">=</span> uuid <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;_&#34;</span> <span style="color:#f92672">+</span> jsonFile<span style="color:#f92672">.</span><span style="color:#a6e22e">getOriginalFilename</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    File uploadVideoFile <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    File uploadJsonFile <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        uploadVideoFile <span style="color:#f92672">=</span> convertMultipartFileToFile<span style="color:#f92672">(</span>videoFile<span style="color:#f92672">,</span> videoFileName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        uploadJsonFile <span style="color:#f92672">=</span> convertMultipartFileToFile<span style="color:#f92672">(</span>jsonFile<span style="color:#f92672">,</span> jsonFileName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        String guideVideoObjectPath <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;video/&#34;</span> <span style="color:#f92672">+</span> videoFileName<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        String jsonObjectPath <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;json/&#34;</span> <span style="color:#f92672">+</span> jsonFileName<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        s3<span style="color:#f92672">.</span><span style="color:#a6e22e">putObject</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> guideVideoObjectPath<span style="color:#f92672">,</span> uploadVideoFile<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        s3<span style="color:#f92672">.</span><span style="color:#a6e22e">putObject</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> jsonObjectPath<span style="color:#f92672">,</span> uploadJsonFile<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        String baseUploadURL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://kr.object.ncloudstorage.com/&#34;</span> <span style="color:#f92672">+</span> bucketName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        String guideVideoURL <span style="color:#f92672">=</span> baseUploadURL <span style="color:#f92672">+</span> guideVideoObjectPath<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        String jsonURL <span style="color:#f92672">=</span> baseUploadURL <span style="color:#f92672">+</span> jsonObjectPath<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span>guideVideoURL<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span>jsonURL<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        setAcl<span style="color:#f92672">(</span>s3<span style="color:#f92672">,</span> guideVideoObjectPath<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        setAcl<span style="color:#f92672">(</span>s3<span style="color:#f92672">,</span> jsonObjectPath<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> UploadFileDTO<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">guideVideoURL</span><span style="color:#f92672">(</span>guideVideoURL<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">jsonURL</span><span style="color:#f92672">(</span>jsonURL<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">guideVideoObjectPath</span><span style="color:#f92672">(</span>guideVideoObjectPath<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">jsonObjectPath</span><span style="color:#f92672">(</span>jsonObjectPath<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>AmazonS3Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span> <span style="color:#75715e">// ACL Exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span>e<span style="color:#f92672">.</span><span style="color:#a6e22e">getErrorMessage</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span> <span style="color:#75715e">// 업로드 오류 시 null 반환
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 업로드에 사용한 임시 파일을 삭제합니다.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>uploadVideoFile <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> uploadVideoFile<span style="color:#f92672">.</span><span style="color:#a6e22e">delete</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>uploadJsonFile <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> uploadJsonFile<span style="color:#f92672">.</span><span style="color:#a6e22e">delete</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>또 설명할 중요한 부분이 남아있다.</p>
<p>bucket은 폴더, 파일 단위로 외부에 공개할 수 있는 설정 권한을 매번 설정해줘야하는데 다음과 같이 변경하면</p>
<p><img src="/NaverCloud-ObjectStroage/img2.png" alt="폴더 파일공개"></p>
<p>json/ 밑에 생기는 파일들은 새로 생기는 파일들이라 다시 외부에 비공개가되어 이짓거리를 매번 해줘야한다.</p>
<p>그래서 생각해낸 방법이 파일을 생성하자마자 그 파일에 대한 권한을 바꾸는 방법이다.</p>
<p>Docs를 찾아보니 ACL 권한을 수정하는 API가 존재하였다.</p>
<p>필자는 setAcl 이라는 메소드를 지정해서 s3 인스턴스와 Path를 넘겨서 처리하였다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAcl</span><span style="color:#f92672">(</span>AmazonS3 s3<span style="color:#f92672">,</span> String objectPath<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    AccessControlList objectAcl <span style="color:#f92672">=</span> s3<span style="color:#f92672">.</span><span style="color:#a6e22e">getObjectAcl</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> objectPath<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    objectAcl<span style="color:#f92672">.</span><span style="color:#a6e22e">grantPermission</span><span style="color:#f92672">(</span>GroupGrantee<span style="color:#f92672">.</span><span style="color:#a6e22e">AllUsers</span><span style="color:#f92672">,</span> Permission<span style="color:#f92672">.</span><span style="color:#a6e22e">Read</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    s3<span style="color:#f92672">.</span><span style="color:#a6e22e">setObjectAcl</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> objectPath<span style="color:#f92672">,</span> objectAcl<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>이런식으로 Read권한을 설정해주면 등록 한 후 권한을 바로 바꿔주어서 URL로 Client가 바로 접근가능하다.</p>
<h2 id="5-delete-api-구현">5. Delete API 구현</h2>
<p>마찬가지로 bucketname과 Path를 이용하여 삭제 요청을 하면된다.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deleteFileFromS3</span><span style="color:#f92672">(</span>String guideVideoObjectPath<span style="color:#f92672">,</span> String jsonObjectPath<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    AmazonS3 s3 <span style="color:#f92672">=</span> s3Client<span style="color:#f92672">.</span><span style="color:#a6e22e">getAmazonS3</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        s3<span style="color:#f92672">.</span><span style="color:#a6e22e">deleteObject</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> guideVideoObjectPath<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        s3<span style="color:#f92672">.</span><span style="color:#a6e22e">deleteObject</span><span style="color:#f92672">(</span>bucketName<span style="color:#f92672">,</span> jsonObjectPath<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Delete Object successfully&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span><span style="color:#f92672">(</span>SdkClientException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error deleteFileFromS3&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
