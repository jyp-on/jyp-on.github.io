<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&lt;{😎}&gt;</title>
    <link>https://jyp-on.dev/</link>
    <description>Recent content on &lt;{😎}&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 16 Sep 2023 05:10:00 -0600</lastBuildDate><atom:link href="https://jyp-on.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>N&#43;1 문제란</title>
      <link>https://jyp-on.dev/posts/2023/09/n-1-%EB%AC%B8%EC%A0%9C%EB%9E%80/</link>
      <pubDate>Sat, 16 Sep 2023 05:10:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/n-1-%EB%AC%B8%EC%A0%9C%EB%9E%80/</guid>
      <description>N+1 문제의 예를들어 쉽게 설명 해보겠습니다.
다음과 같은 쿼리로 MEMBER 100명을 조회합니다.
SELECT * FROM MEMBER; 하지만 이 조회로 끝나는게 아니라 TEAM에 대한 조회가 필요하다면 MEMBER 조회 시 TEAM에 대한 조회도 같이 이루어집니다.
결국 100명의 회원에 대한 조회에서 회원마다의 팀 조회까지 이루어져 총 1 + 100 = 101 번의 SQL 조회가 이루어 집니다. 그래서 저는 이 현상을 1 + N 조회라고 기억하는 편입니다.
이러한 문제를 해결하기 위해 몇 가지 방법이 있습니다.</description>
    </item>
    
    <item>
      <title>지연로딩, 즉시로딩이란?</title>
      <link>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Fri, 15 Sep 2023 23:16:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</guid>
      <description>Fetch Type 설명 지연로딩 (LAZY) 연관된 객체를 사용하는 시점에 적절한 SELECT SQL을 실행 즉시로딩 (EAGER) 메인 객체 조회시 객체그래프를 탐색하여 연관된 객체 전부 SELECT 지연로딩을 예를 들어 Member에 직접적으로 연관된 테이블이 Team, Order이 있다고 치자.
// 첫 조회 시점에 SELECT MEMBER SQL을 날리고 Member member = jpa.find(Member.class, memberId); Team team = member.getTeam(); team.getTeamName(); // 이 시점에 SELECT TEAM SQL을 날린다. 즉시로딩 Example
// 첫 조회 시점에 SELECT MEMBER, TEAM, ORDER SQL을 날린다.</description>
    </item>
    
    <item>
      <title>Spring Boot JPQL DTO Mapping</title>
      <link>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</link>
      <pubDate>Fri, 08 Sep 2023 22:16:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</guid>
      <description>jpa를 사용할때 jpa repository에서 return 을 DTO로 변환해서 받을 수 있다.
jpql select 부분에서 DTO로 사용할 객체를 생성 해줘야한다. 주의할 점은 DTO 생성시 패키지 초반부분부터 적어줘야 찾을 수 있다.
먼저 Person 객체와 PersonDTO 객체가 있다고 가정하자.
Person 객체에는 name, age, email, id,
PersonDTO 객체에는 name, age
이고 만약 최소 나이를 파라미터로 그 나이 이상의 Person 객체를 가져오고 싶다면 JPQL을 아래와 같이 구성 해야 한다.
@Query(value = &amp;#34;SELECT &amp;#34; + &amp;#34;new com.</description>
    </item>
    
    <item>
      <title>Spring Boot [NaverCloud ObjectStorage] 사용법</title>
      <link>https://jyp-on.dev/posts/2023/09/spring-boot-navercloud-objectstorage-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sat, 02 Sep 2023 16:14:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/spring-boot-navercloud-objectstorage-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>이번에 진행하는 프로젝트에서 영상 및 JSON 파일을 object storage에 저장하는 서비스 로직을 추가하게 되었다
설명에 앞서 Amazon의 S3가 아닌 Ncloud의 objectStorage를 선정한 이유는 크게 4가지다.
국내서비스라 문서읽기가 매우편함.
최근 Ncloud의 Server, DB 등등 사용해봐서 익숙함.
AWS 과금에 당한적이있음.
objectstorage 1주간 사용해봤는데 파일 크기가 얼마안되는지 아직까지 0원 청구됨. (매우쌈)
Amazon의 S3랑 완벽하게 호환되고 국내서비스라 Docs를 읽을때 좀 더 쉽게 이해할 수 있었다 나는 spring boot 즉 java 언어를 사용하기 때문에 아래와 같은 Docs를 참고하여 사용하였음</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jyp-on.dev/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jyp-on.dev/about/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Learn more and contribute on GitHub.</description>
    </item>
    
  </channel>
</rss>
