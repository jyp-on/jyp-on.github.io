<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa on &lt;{😎}&gt;</title>
    <link>https://jyp-on.dev/categories/jpa/</link>
    <description>Recent content in jpa on &lt;{😎}&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 15 Sep 2023 23:16:00 -0600</lastBuildDate><atom:link href="https://jyp-on.dev/categories/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>지연로딩, 즉시로딩이란?</title>
      <link>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Fri, 15 Sep 2023 23:16:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9-%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80/</guid>
      <description>Fetch Type 설명 지연로딩 (LAZY) 연관된 객체를 사용하는 시점에 적절한 SELECT SQL을 실행 즉시로딩 (EAGER) 메인 객체 조회시 객체그래프를 탐색하여 연관된 객체 전부 SELECT 지연로딩을 예를 들어 Member에 직접적으로 연관된 테이블이 Team, Order이 있다고 치자.
// 첫 조회 시점에 SELECT MEMBER SQL을 날리고 Member member = jpa.find(Member.class, memberId); Team team = member.getTeam(); team.getTeamName(); // 이 시점에 SELECT TEAM SQL을 날린다. 즉시로딩 Example
// 첫 조회 시점에 SELECT MEMBER, TEAM, ORDER SQL을 날린다.</description>
    </item>
    
    <item>
      <title>Spring Boot JPQL DTO Mapping</title>
      <link>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</link>
      <pubDate>Fri, 08 Sep 2023 22:16:00 -0600</pubDate>
      
      <guid>https://jyp-on.dev/posts/2023/09/spring-boot-jpql-dto-mapping/</guid>
      <description>jpa를 사용할때 jpa repository에서 return 을 DTO로 변환해서 받을 수 있다.
jpql select 부분에서 DTO로 사용할 객체를 생성 해줘야한다. 주의할 점은 DTO 생성시 패키지 초반부분부터 적어줘야 찾을 수 있다.
먼저 Person 객체와 PersonDTO 객체가 있다고 가정하자.
Person 객체에는 name, age, email, id,
PersonDTO 객체에는 name, age
이고 만약 최소 나이를 파라미터로 그 나이 이상의 Person 객체를 가져오고 싶다면 JPQL을 아래와 같이 구성 해야 한다.
@Query(value = &amp;#34;SELECT &amp;#34; + &amp;#34;new com.</description>
    </item>
    
  </channel>
</rss>
